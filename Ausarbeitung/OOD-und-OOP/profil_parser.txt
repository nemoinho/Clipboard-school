__Parser

Die Klassen die das Parser-Interface benutzen, dienen der Veränderung der Einträge.

Die Grundfunktion, also die Manipulation des Eintrags, soll in der Methode 'parse' geschehen. Diese bekommt den Inhalt über ein String Parameter. 

Als Beispiel wurde ein RegEx-Parser umgesetzt. Dieser verändert die Einträge mit Hilfe eines regulären Ausdrucks. Ein Beispiel um die Funktionalität zu erläutern: 
RegEx-Parameter:
  match="[^\s]" (ein Zeichen, außer Leerzeile / -zeichen)
  replace="?"
Da String.replaceAll verwendet wird, würde der Parser alle Buchstaben durch ein Fragezeichen ersetzen. Die Parameter 'match' und 'replace' können entsprechend über die GUI gesetzt werden. 

Unser Parser benötigt also eigene Parameter. Da dieser Fall öfters auftreten kann, haben wir uns entschieden, die Parameter bei dem Parser selbst zu behandeln. Um dieses Ziel in Java zu erreichen bekamen diese intern den Datentyp 'Object'. In unserem Programm wurden nur String-Parameter benötigt, deshalb ist bei der Dynamisierung nur dieser Fall behandelt. Durch das Abfragen der Klasse des instanzierten Objektes, ist eine sichere Typisierung weiterhin gewährleistet. Für Strings bietet sich ein Eingabefeld an, bei boolean Parameter könnte man z.B. eine Checkbox verwenden. Die Parameter werden in einer HashMap gespeichert, dementsprechend gibt es für alle Parameter ein gemeinsamen Setter und Getter.

Bei einem Parse-Aufruf können natürlich auch Fehler auftritten, auch hier ist der Parser selbst dafür verantwortlich diese abzufangen.

Durch die Plugin-Architektur ist zur Zeit der Kompilierung nicht bekannt, welche Parser-Klassen verfügbar sind. Aus diesem Grund ist es notwendig, dass das Objekt selbst weitere Instanzen erzeugen kann, dies passiert in der getParser-Methode.

Um die einzelnen Parser in der GUI anzuzeigen, wird zusätzlich ein Name benötigt. Standardmäßig wird hierfür das Packet verwendet in dem sich der entsprechende Parser befindet. Angedacht war auch eine Beschreibung, diese wird allerdings in der Oberfläche nicht angezeigt.


__Profile

Ein Profil verwaltet alle verfügbaren/aktiven Parser. Hierfür wurden mehrere Methoden implementiert, die auf die Parser-Methoden zugreifen. Dies ist in derzeitigen Programmstadium nicht notwendig, macht die Wartung allerdings einfacher. So muss bei einer Zugriffsänderung nur das Profil angepasst werden.

Um die unterschiedlichen Profile auseinander halten zu können, benötigen diese, so wie die Parser, einen Namen der über die GUI gesetzt werden kann.

In der Methode initParser werden die Parser-Objekte instantisiert. Da der Plugin-Loader selbst keine Objekte zurückgibt, wird versucht über die getParser Methode eine Instanz zu erzeugen. Wenn dies fehlschlägt, kann es sich auch um keinen validen Parser handeln.



__GUI - Profil / Parser

(GUI_profil_parser.JPG)

1. Profilerstellung, hier kann der Name für ein neues Profil eingegeben werden.

2. Profil Kontrollleiste. 
- Ein DropDown Menü (JComboBox) mit allen verfügbaren Profilen.
- "+" - öffnet ein Fenster zur Profilerstellung.
- "-" - löscht das ausgewählte Profil.

3. Parser-Kontrollleiste. 
- Checkbox (JCheckBox), (de-)aktiviert das Profil.
- Parser-Button (JButton), öffnet das Parser-Fenster.

4. Parser-Liste (JList), zeigt alle verfügbaren Parser an. Die Parser die ausgewählt sind werden als aktiv gesetzt beim speichern.

5. Optionaler Bereich, hier können Parser eingestellt werden (bleibt Leer, wenn ein Parser keine Parameter beinhaltet).

6. Buttons, um die getätigten Einstellungen zu speichern / verwerfen.